version: "3.1"

services:
  conseil-lorre:
    image: cryptonomictech/conseil:july
    command: conseil-lorre
    environment:
      DB_Host: "${DB_HOST}"
      DB_User: "${DB_USER}"
      DB_Password: "${DB_PASSWORD}"
      DB_Database: "${DB_DATABASE}"
      XTZ_Host: "${XTZ_HOST}"
      XTZ_Scheme: "${XTZ_SCHEME}"
      XTZ_Port: "${XTZ_PORT}"
    # If using localhost db you may want to use the host network
    network_mode: "host"
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
  conseil-DELPHI-lorre:
    image: cryptonomictech/conseil:july
    command: conseil-lorre
    environment:
      DB_Host: ${DB_HOST}
      DB_User: ${DB_USER}
      DB_Password: ${DB_PASSWORD}
      DB_Database: ${DELPHI_DB_DATABASE}
      XTZ_Host: ${DELPHI_XTZ_HOST}
      XTZ_Scheme: "${DELPHI_XTZ_SCHEME}"
      XTZ_Port: "${DELPHI_XTZ_PORT}"
      XTZ_Network: "DELPHI"
    # If using localhost db you may want to use the host network
    network_mode: "host"
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
  fe-server:
    build:
      context: https://github.com/everstake/teztracker-front.git
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
  api-server:
    build: .
    ports:
      - ${TEZTRACKER_PORT}:${TEZTRACKER_PORT}
    environment:
      TEZTRACKER_PORT: ${TEZTRACKER_PORT}
      TEZTRACKER_MAINNET_SQLCONNECTIONSTRING: ${TEZTRACKER_MAINNET_SQLCONNECTIONSTRING}
      TEZTRACKER_DELPHI_SQLCONNECTIONSTRING: ${TEZTRACKER_DELPHI_SQLCONNECTIONSTRING}
      TEZTRACKER_LOG_LEVEL: ${TEZTRACKER_LOG_LEVEL}
      TEZTRACKER_COUNTERINTERVALHOURS: ${TEZTRACKER_COUNTERINTERVALHOURS}
      TEZTRACKER_FUTURERIGHTSINTERVALMINUTES: ${TEZTRACKER_FUTURERIGHTSINTERVALMINUTES}
      TEZTRACKER_SNAPSHOTCHECKINTERVALMINUTES: ${TEZTRACKER_SNAPSHOTCHECKINTERVALMINUTES}
      TEZTRACKER_DOUBLEBAKINGCHECKINTERVALMINUTES: ${TEZTRACKER_DOUBLEBAKINGCHECKINTERVALMINUTES}
      TEZTRACKER_DOUBLEENDORSEMENTCHECKINTERVALMINUTES: ${TEZTRACKER_DOUBLEENDORSEMENTCHECKINTERVALMINUTES}
      TEZTRACKER_ASSETSPARSEINTERVALMINUTES: ${TEZTRACKER_ASSETSPARSEINTERVALMINUTES}
      TEZTRACKER_VOTINGROLLSINTERVALMINUTES : ${TEZTRACKER_VOTINGROLLSINTERVALMINUTES}
      TEZTRACKER_THIRDPARTYBAKERSINTERVALMINUTES : ${TEZTRACKER_THIRDPARTYBAKERSINTERVALMINUTES}

      #todo: if the scheme is not http or host/port are different then for lorry - pass it through
      TEZTRACKER_MAINNET_NODERPC_HOST: "${XTZ_HOST}:${XTZ_PORT}"
      TEZTRACKER_MAINNET_NODERPC_SCHEMES: "${XTZ_SCHEME}"
      TEZTRACKER_DELPHI_NODERPC_HOST: "${DELPHI_XTZ_HOST}:${DELPHI_XTZ_PORT}"
      TEZTRACKER_DELPHI_NODERPC_SCHEMES: "${DELPHI_XTZ_SCHEME}"
    # If using localhost db you may want to use the host network
    network_mode: "host"
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
  api-documentation:
    build:
      context: .
      dockerfile: Dockerfile-api
    ports:
      - ${TEZTRACKER_API_DOCUMENTATION_PORT}:8080