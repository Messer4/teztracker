// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BakerDelegator baker delegator
// swagger:model BakerDelegator
type BakerDelegator struct {

	// balance
	// Required: true
	Balance *int64 `json:"balance"`

	// cycle
	// Required: true
	Cycle *int64 `json:"cycle"`

	// delegator
	// Required: true
	Delegator *string `json:"delegator"`

	// share
	// Required: true
	Share *float64 `json:"share"`
}

// Validate validates this baker delegator
func (m *BakerDelegator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelegator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShare(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BakerDelegator) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *BakerDelegator) validateCycle(formats strfmt.Registry) error {

	if err := validate.Required("cycle", "body", m.Cycle); err != nil {
		return err
	}

	return nil
}

func (m *BakerDelegator) validateDelegator(formats strfmt.Registry) error {

	if err := validate.Required("delegator", "body", m.Delegator); err != nil {
		return err
	}

	return nil
}

func (m *BakerDelegator) validateShare(formats strfmt.Registry) error {

	if err := validate.Required("share", "body", m.Share); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BakerDelegator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BakerDelegator) UnmarshalBinary(b []byte) error {
	var res BakerDelegator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
