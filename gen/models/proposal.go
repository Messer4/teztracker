// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Proposal proposal
// swagger:model Proposal
type Proposal struct {

	// hash
	Hash string `json:"hash,omitempty"`

	// min quorum
	MinQuorum int64 `json:"minQuorum,omitempty"`

	// period
	Period int64 `json:"period,omitempty"`

	// proposal file
	ProposalFile string `json:"proposalFile,omitempty"`

	// proposer
	Proposer *ProposalProposer `json:"proposer,omitempty"`

	// short description
	ShortDescription string `json:"shortDescription,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// votes casted
	VotesCasted int64 `json:"votesCasted,omitempty"`

	// votes num
	VotesNum int64 `json:"votesNum,omitempty"`
}

// Validate validates this proposal
func (m *Proposal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProposer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Proposal) validateProposer(formats strfmt.Registry) error {

	if swag.IsZero(m.Proposer) { // not required
		return nil
	}

	if m.Proposer != nil {
		if err := m.Proposer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Proposal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Proposal) UnmarshalBinary(b []byte) error {
	var res Proposal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProposalProposer proposal proposer
// swagger:model ProposalProposer
type ProposalProposer struct {

	// name
	Name string `json:"name,omitempty"`

	// pkh
	Pkh string `json:"pkh,omitempty"`
}

// Validate validates this proposal proposer
func (m *ProposalProposer) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProposalProposer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProposalProposer) UnmarshalBinary(b []byte) error {
	var res ProposalProposer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
