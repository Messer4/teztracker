// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PeriodInfo period info
// swagger:model PeriodInfo
type PeriodInfo struct {

	// ballots
	Ballots *Ballots `json:"ballots,omitempty"`

	// period
	Period *Period `json:"period,omitempty"`

	// proposal
	Proposal *Proposal `json:"proposal,omitempty"`

	// total periods
	TotalPeriods int64 `json:"totalPeriods,omitempty"`

	// vote stats
	VoteStats *VoteStats `json:"voteStats,omitempty"`

	// winner
	Winner *Proposal `json:"winner,omitempty"`
}

// Validate validates this period info
func (m *PeriodInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBallots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProposal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVoteStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWinner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeriodInfo) validateBallots(formats strfmt.Registry) error {

	if swag.IsZero(m.Ballots) { // not required
		return nil
	}

	if m.Ballots != nil {
		if err := m.Ballots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ballots")
			}
			return err
		}
	}

	return nil
}

func (m *PeriodInfo) validatePeriod(formats strfmt.Registry) error {

	if swag.IsZero(m.Period) { // not required
		return nil
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *PeriodInfo) validateProposal(formats strfmt.Registry) error {

	if swag.IsZero(m.Proposal) { // not required
		return nil
	}

	if m.Proposal != nil {
		if err := m.Proposal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposal")
			}
			return err
		}
	}

	return nil
}

func (m *PeriodInfo) validateVoteStats(formats strfmt.Registry) error {

	if swag.IsZero(m.VoteStats) { // not required
		return nil
	}

	if m.VoteStats != nil {
		if err := m.VoteStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("voteStats")
			}
			return err
		}
	}

	return nil
}

func (m *PeriodInfo) validateWinner(formats strfmt.Registry) error {

	if swag.IsZero(m.Winner) { // not required
		return nil
	}

	if m.Winner != nil {
		if err := m.Winner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("winner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeriodInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeriodInfo) UnmarshalBinary(b []byte) error {
	var res PeriodInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
