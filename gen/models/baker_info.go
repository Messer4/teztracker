// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BakerInfo baker info
// swagger:model BakerInfo
type BakerInfo struct {

	// active delegators
	ActiveDelegators int64 `json:"activeDelegators,omitempty"`

	// baking deposits
	BakingDeposits int64 `json:"bakingDeposits,omitempty"`

	// baking rewards
	BakingRewards int64 `json:"bakingRewards,omitempty"`

	// baking since
	BakingSince int64 `json:"bakingSince,omitempty"`

	// blocks
	Blocks int64 `json:"blocks,omitempty"`

	// endorsement deposits
	EndorsementDeposits int64 `json:"endorsementDeposits,omitempty"`

	// endorsement rewards
	EndorsementRewards int64 `json:"endorsementRewards,omitempty"`

	// endorsements
	Endorsements int64 `json:"endorsements,omitempty"`

	// evaluated balance
	EvaluatedBalance int64 `json:"evaluatedBalance,omitempty"`

	// fee
	// Required: true
	Fee *int64 `json:"fee"`

	// frozen balance
	FrozenBalance int64 `json:"frozenBalance,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// rolls
	Rolls int64 `json:"rolls,omitempty"`

	// staking balance
	StakingBalance int64 `json:"stakingBalance,omitempty"`

	// staking capacity
	StakingCapacity int64 `json:"stakingCapacity,omitempty"`

	// total paid fees
	TotalPaidFees int64 `json:"totalPaidFees,omitempty"`
}

// Validate validates this baker info
func (m *BakerInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BakerInfo) validateFee(formats strfmt.Registry) error {

	if err := validate.Required("fee", "body", m.Fee); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BakerInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BakerInfo) UnmarshalBinary(b []byte) error {
	var res BakerInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
