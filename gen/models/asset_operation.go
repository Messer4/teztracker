// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetOperation asset operation
// swagger:model AssetOperation
type AssetOperation struct {

	// amount
	// Required: true
	Amount *int64 `json:"amount"`

	// fee
	// Required: true
	Fee *int64 `json:"fee"`

	// from
	From string `json:"from,omitempty"`

	// gas limit
	// Required: true
	GasLimit *int64 `json:"gas_limit"`

	// operation group hash
	OperationGroupHash string `json:"operation_group_hash,omitempty"`

	// storage limit
	// Required: true
	StorageLimit *int64 `json:"storage_limit"`

	// timestamp
	Timestamp int64 `json:"timestamp,omitempty"`

	// to
	To string `json:"to,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this asset operation
func (m *AssetOperation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageLimit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetOperation) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *AssetOperation) validateFee(formats strfmt.Registry) error {

	if err := validate.Required("fee", "body", m.Fee); err != nil {
		return err
	}

	return nil
}

func (m *AssetOperation) validateGasLimit(formats strfmt.Registry) error {

	if err := validate.Required("gas_limit", "body", m.GasLimit); err != nil {
		return err
	}

	return nil
}

func (m *AssetOperation) validateStorageLimit(formats strfmt.Registry) error {

	if err := validate.Required("storage_limit", "body", m.StorageLimit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetOperation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetOperation) UnmarshalBinary(b []byte) error {
	var res AssetOperation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
