// Code generated by go-swagger; DO NOT EDIT.

package voting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetProposalsByPeriodIDHandlerFunc turns a function with the right signature into a get proposals by period ID handler
type GetProposalsByPeriodIDHandlerFunc func(GetProposalsByPeriodIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetProposalsByPeriodIDHandlerFunc) Handle(params GetProposalsByPeriodIDParams) middleware.Responder {
	return fn(params)
}

// GetProposalsByPeriodIDHandler interface for that can handle valid get proposals by period ID params
type GetProposalsByPeriodIDHandler interface {
	Handle(GetProposalsByPeriodIDParams) middleware.Responder
}

// NewGetProposalsByPeriodID creates a new http.Handler for the get proposals by period ID operation
func NewGetProposalsByPeriodID(ctx *middleware.Context, handler GetProposalsByPeriodIDHandler) *GetProposalsByPeriodID {
	return &GetProposalsByPeriodID{Context: ctx, Handler: handler}
}

/*GetProposalsByPeriodID swagger:route GET /v2/{network}/proposals/{id} Voting getProposalsByPeriodId

GetProposalsByPeriodID get proposals by period ID API

*/
type GetProposalsByPeriodID struct {
	Context *middleware.Context
	Handler GetProposalsByPeriodIDHandler
}

func (o *GetProposalsByPeriodID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetProposalsByPeriodIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
