// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAccountTotalEndorsingListHandlerFunc turns a function with the right signature into a get account total endorsing list handler
type GetAccountTotalEndorsingListHandlerFunc func(GetAccountTotalEndorsingListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAccountTotalEndorsingListHandlerFunc) Handle(params GetAccountTotalEndorsingListParams) middleware.Responder {
	return fn(params)
}

// GetAccountTotalEndorsingListHandler interface for that can handle valid get account total endorsing list params
type GetAccountTotalEndorsingListHandler interface {
	Handle(GetAccountTotalEndorsingListParams) middleware.Responder
}

// NewGetAccountTotalEndorsingList creates a new http.Handler for the get account total endorsing list operation
func NewGetAccountTotalEndorsingList(ctx *middleware.Context, handler GetAccountTotalEndorsingListHandler) *GetAccountTotalEndorsingList {
	return &GetAccountTotalEndorsingList{Context: ctx, Handler: handler}
}

/*GetAccountTotalEndorsingList swagger:route GET /v2/data/{platform}/{network}/accounts/endorsing/{accountId}/total Accounts getAccountTotalEndorsingList

GetAccountTotalEndorsingList get account total endorsing list API

*/
type GetAccountTotalEndorsingList struct {
	Context *middleware.Context
	Handler GetAccountTotalEndorsingListHandler
}

func (o *GetAccountTotalEndorsingList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAccountTotalEndorsingListParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
