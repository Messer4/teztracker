// Code generated by go-swagger; DO NOT EDIT.

package accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	models "github.com/everstake/teztracker/gen/models"
)

// GetPublicBakersListForSearchOKCode is the HTTP code returned for type GetPublicBakersListForSearchOK
const GetPublicBakersListForSearchOKCode int = 200

/*GetPublicBakersListForSearchOK Query Endpoint for getting list of baker accounts with name for search.

swagger:response getPublicBakersListForSearchOK
*/
type GetPublicBakersListForSearchOK struct {
	/*The total number of data entries.

	 */
	XTotalCount int64 `json:"X-Total-Count"`

	/*
	  In: Body
	*/
	Payload []*models.PublicBakerSearch `json:"body,omitempty"`
}

// NewGetPublicBakersListForSearchOK creates GetPublicBakersListForSearchOK with default headers values
func NewGetPublicBakersListForSearchOK() *GetPublicBakersListForSearchOK {

	return &GetPublicBakersListForSearchOK{}
}

// WithXTotalCount adds the xTotalCount to the get public bakers list for search o k response
func (o *GetPublicBakersListForSearchOK) WithXTotalCount(xTotalCount int64) *GetPublicBakersListForSearchOK {
	o.XTotalCount = xTotalCount
	return o
}

// SetXTotalCount sets the xTotalCount to the get public bakers list for search o k response
func (o *GetPublicBakersListForSearchOK) SetXTotalCount(xTotalCount int64) {
	o.XTotalCount = xTotalCount
}

// WithPayload adds the payload to the get public bakers list for search o k response
func (o *GetPublicBakersListForSearchOK) WithPayload(payload []*models.PublicBakerSearch) *GetPublicBakersListForSearchOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get public bakers list for search o k response
func (o *GetPublicBakersListForSearchOK) SetPayload(payload []*models.PublicBakerSearch) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPublicBakersListForSearchOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Total-Count

	xTotalCount := swag.FormatInt64(o.XTotalCount)
	if xTotalCount != "" {
		rw.Header().Set("X-Total-Count", xTotalCount)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.PublicBakerSearch, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetPublicBakersListForSearchBadRequestCode is the HTTP code returned for type GetPublicBakersListForSearchBadRequest
const GetPublicBakersListForSearchBadRequestCode int = 400

/*GetPublicBakersListForSearchBadRequest Bad request

swagger:response getPublicBakersListForSearchBadRequest
*/
type GetPublicBakersListForSearchBadRequest struct {
}

// NewGetPublicBakersListForSearchBadRequest creates GetPublicBakersListForSearchBadRequest with default headers values
func NewGetPublicBakersListForSearchBadRequest() *GetPublicBakersListForSearchBadRequest {

	return &GetPublicBakersListForSearchBadRequest{}
}

// WriteResponse to the client
func (o *GetPublicBakersListForSearchBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// GetPublicBakersListForSearchNotFoundCode is the HTTP code returned for type GetPublicBakersListForSearchNotFound
const GetPublicBakersListForSearchNotFoundCode int = 404

/*GetPublicBakersListForSearchNotFound Not Found

swagger:response getPublicBakersListForSearchNotFound
*/
type GetPublicBakersListForSearchNotFound struct {
}

// NewGetPublicBakersListForSearchNotFound creates GetPublicBakersListForSearchNotFound with default headers values
func NewGetPublicBakersListForSearchNotFound() *GetPublicBakersListForSearchNotFound {

	return &GetPublicBakersListForSearchNotFound{}
}

// WriteResponse to the client
func (o *GetPublicBakersListForSearchNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}
