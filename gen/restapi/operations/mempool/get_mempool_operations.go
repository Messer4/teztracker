// Code generated by go-swagger; DO NOT EDIT.

package mempool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetMempoolOperationsHandlerFunc turns a function with the right signature into a get mempool operations handler
type GetMempoolOperationsHandlerFunc func(GetMempoolOperationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMempoolOperationsHandlerFunc) Handle(params GetMempoolOperationsParams) middleware.Responder {
	return fn(params)
}

// GetMempoolOperationsHandler interface for that can handle valid get mempool operations params
type GetMempoolOperationsHandler interface {
	Handle(GetMempoolOperationsParams) middleware.Responder
}

// NewGetMempoolOperations creates a new http.Handler for the get mempool operations operation
func NewGetMempoolOperations(ctx *middleware.Context, handler GetMempoolOperationsHandler) *GetMempoolOperations {
	return &GetMempoolOperations{Context: ctx, Handler: handler}
}

/*GetMempoolOperations swagger:route GET /v2/data/{platform}/{network}/mempool Mempool getMempoolOperations

GetMempoolOperations get mempool operations API

*/
type GetMempoolOperations struct {
	Context *middleware.Context
	Handler GetMempoolOperationsHandler
}

func (o *GetMempoolOperations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMempoolOperationsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
