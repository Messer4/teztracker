// Code generated by go-swagger; DO NOT EDIT.

package app_info

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetBlocksPriorityChartInfoHandlerFunc turns a function with the right signature into a get blocks priority chart info handler
type GetBlocksPriorityChartInfoHandlerFunc func(GetBlocksPriorityChartInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBlocksPriorityChartInfoHandlerFunc) Handle(params GetBlocksPriorityChartInfoParams) middleware.Responder {
	return fn(params)
}

// GetBlocksPriorityChartInfoHandler interface for that can handle valid get blocks priority chart info params
type GetBlocksPriorityChartInfoHandler interface {
	Handle(GetBlocksPriorityChartInfoParams) middleware.Responder
}

// NewGetBlocksPriorityChartInfo creates a new http.Handler for the get blocks priority chart info operation
func NewGetBlocksPriorityChartInfo(ctx *middleware.Context, handler GetBlocksPriorityChartInfoHandler) *GetBlocksPriorityChartInfo {
	return &GetBlocksPriorityChartInfo{Context: ctx, Handler: handler}
}

/*GetBlocksPriorityChartInfo swagger:route GET /v2/data/{platform}/{network}/charts/blocks_priority App Info getBlocksPriorityChartInfo

GetBlocksPriorityChartInfo get blocks priority chart info API

*/
type GetBlocksPriorityChartInfo struct {
	Context *middleware.Context
	Handler GetBlocksPriorityChartInfoHandler
}

func (o *GetBlocksPriorityChartInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBlocksPriorityChartInfoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
